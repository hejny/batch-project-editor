import { readFile } from 'fs/promises';
import { join, relative } from 'path';
import spaceTrim from 'spacetrim';
import { isFileExisting } from '../../utils/isFileExisting';
import { DESCRIPTION_IN_README } from '../310-description/description';
import { IWorkflowOptions, WorkflowResult } from '../IWorkflow';
import { getMidjourneyLink } from './utils/getMidjourneyLink';

export const WALLPAPER_IN_README = /<!--Wallpaper-->(?<wallpaper>.*)<!--\/Wallpaper-->/is;

export async function aiGeneratedWallpaperUseInReadme({
    projectTitle,
    projectName,
    projectPath,
    projectOrg,
    modifyFile,
    commit,
    skippingBecauseOf,
    currentBranch,
}: IWorkflowOptions): Promise<WorkflowResult> {
    // TODO: [üèØ] Dry to some util - Use WALLPAPER_PATH + WALLPAPER_IMAGINE_PATH
    const wallpaperPath = join(projectPath, '/assets/ai/wallpaper/');
    const wallpaperGalleryPath = join(wallpaperPath, 'gallery');
    const wallpaperCurrentPointerPath = join(wallpaperPath, 'current');
    if (!(await isFileExisting(wallpaperCurrentPointerPath))) {
        return skippingBecauseOf(`no wallpaper current pointer yet; run aiGeneratedWallpaperPick workflow`);
    }
    const wallpaperCurrentPath = join(wallpaperGalleryPath, await readFile(wallpaperCurrentPointerPath, 'utf8'));
    if (!(await isFileExisting(wallpaperCurrentPath))) {
        throw new Error(`wrong wallpaper current pointer yet; re-run aiGeneratedWallpaperPick workflow`);
    }

    const wallpaperMarkdown = spaceTrim(`
        <!--Wallpaper-->
        <!--‚ö†Ô∏èWARNING: This section was generated by https://github.com/hejny/batch-project-editor/blob/main/src//workflows/315-ai-generated-wallpaper/4-aiGeneratedWallpaperUseInReadme.ts so every manual change will be overwritten.-->
        [![Wallpaper of ${projectTitle}](${relative(projectPath, wallpaperCurrentPath)
        .split('\\')
        .join('/')})](${getMidjourneyLink(wallpaperCurrentPath)})
        <!--/Wallpaper-->
    `);

    await modifyFile('README.md', (readmeContent) => {
        if (readmeContent === null) {
            return null;
        }
        if (WALLPAPER_IN_README.test(readmeContent)) {
            return readmeContent.replace(WALLPAPER_IN_README, wallpaperMarkdown);
        } else {
            const descriptionMatch = readmeContent.match(DESCRIPTION_IN_README);

            if (!descriptionMatch) {
                return readmeContent;
            }
            const descriptionSection = descriptionMatch[0];

            return readmeContent.replace(descriptionSection, descriptionSection + '\n\n' + wallpaperMarkdown + `\n\n`);
        }
    });

    return commit('ü§ñüñºÔ∏èüåΩ Update AI‚Äì‚Å†generated in README');
}

/**
 * TODO: [üé∏] Some common util to modify readme
 * TODO: [üè®] Some common config to parse readme - WALLPAPER_IN_README
 */
