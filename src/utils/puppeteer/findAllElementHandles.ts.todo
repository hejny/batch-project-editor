import { ElementHandle, Page } from 'puppeteer-core';

/**
 * Finds all elements with given conditions
 *
 * Note: This function is going through shadowRoot structure
 * Note: We can not pass the filterCallback directly @see commit 8f8850cb77be2ce466735eef2b4a9d2246b2f61c
 *
 * @param page on which to search
 * @param where the conditions what attributes must element have
 * @returns Array of ElementHandle
 */
export async function findAllElementHandles(
    page: Page,
    where: Record<string, string | number | boolean>,
): Promise<Array<ElementHandle<HTMLElement>>> {
    const elementHandle = await page.evaluateHandle(
        ({ where }) => {
            function traverse(
                node: Node,
                depth: number,
                callback: (node: Node, depth: number) => HTMLElement | null,
            ): HTMLElement | null {
                const result = callback(node, depth);

                if (result !== null) {
                    return result;
                }

                if (node.nodeType == 1 /* <- Element node */) {
                    for (var i = 0; i < node.childNodes.length; i++) {
                        const result = traverse(node.childNodes[i], depth + 1, callback);

                        if (result !== null) {
                            return result;
                        }
                    }
                } else if (node.nodeType == 3 /* <- Text node */) {
                    // Note: Text node can not be traversed
                }

                if (node instanceof HTMLElement && node.shadowRoot) {
                    for (var i = 0; i < node.shadowRoot.childNodes.length; i++) {
                        const result = traverse(node.shadowRoot.childNodes[i], depth + 1, callback);

                        if (result !== null) {
                            return result;
                        }
                    }
                }

                return null;
            }

            const element = traverse(window.document.body, 0, (node: Node, depth: number) => {
                if (!(node instanceof HTMLElement)) {
                    return null;
                }

                const element = node;

                for (const [key, value] of Object.entries(where)) {
                    if (element[key] !== value) {
                        return null;
                    }
                }

                return element;
            });

            return [element, element];
        },
        { where },
    );

    if (elementHandle.asElement() === null) {
        return [];
    }

    return elementHandle as ElementHandle<HTMLElement>;
}

/*
TODO: Finish the function

Sample usage:


const elementHandles = await findAllElementHandles(getChatBingPage(), {
  tagName: 'TEXTAREA',
  id: 'searchbox',
}).catch((error) => {
  console.error('error in findAllElementHandles', error);
  return [];
});
console.log(elementHandles);
for (const elementHandle of elementHandles) {
  await markElement(elementHandle);
}
await forEver();


*/
