[
    {
        "requestText": "Write JSDoc annotations for TypeScript code:\n\n\n\n\ntype ButtonStatus = 'BLANK' | 'TRIGGERED' | 'UNKNOWN';\n\nasync function getStatusOfButton(\n    elementHandle: ElementHandle<HTMLButtonElement>,\n    isLogged: boolean,\n): Promise<ButtonStatus> {\n\n    await forPlay();\n    const color = await elementHandle.evaluate((element) => {\n        return window.getComputedStyle(element).backgroundColor;\n    });\n\n    if (color === 'rgb(79, 84, 92)' || color === 'rgb(104, 109, 115)') {\n        return 'BLANK';\n    } else if (\n        color === 'rgb(88, 101, 242)' ||\n        color === 'rgb(71, 82, 196)' ||\n        color === 'rgb(45, 125, 70)' ||\n        color === '@@@ rgb(45, 125, 70)'\n    ) {\n        return 'TRIGGERED';\n    } else {\n        if (isLogged) {\n            console.info('Unknown color', { color });\n        }\n        return 'UNKNOWN';\n    }\n}\n\n\n",
        "responseText": "Here is the TypeScript code with JSDoc annotations:\n\n/**\n * The status of a button.\n * @typedef {'BLANK' | 'TRIGGERED' | 'UNKNOWN'} ButtonStatus\n */\n\n/**\n * Gets the status of a button.\n * @async\n * @function getStatusOfButton\n * @param {ElementHandle<HTMLButtonElement>} elementHandle - The handle to the button element.\n * @param {boolean} isLogged - Whether the user is logged in or not.\n * @returns {Promise<ButtonStatus>} The status of the button.\n */\nasync function getStatusOfButton(\n  elementHandle: ElementHandle<HTMLButtonElement>,\n  isLogged: boolean,\n): Promise<ButtonStatus> {\n  await forPlay();\n  const color = await elementHandle.evaluate((element) => {\n    return window.getComputedStyle(element).backgroundColor;\n  });\n  if (color === 'rgb(79, 84, 92)' || color === 'rgb(104, 109, 115)') {\n    return 'BLANK';\n  } else if (\n    color === 'rgb(88, 101, 242)' ||\n    color === 'rgb(71, 82, 196)' ||\n    color === 'rgb(45, 125, 70)' ||\n    color === '@@@ rgb(45, 125, 70)'\n  ) {\n    return 'TRIGGERED';\n  } else {\n    if (isLogged) {\n      console.info('Unknown color', { color });\n    }\n    return 'UNKNOWN';\n  }\n}\n",
        "responseHtml": "\n    <div class=\"content\" aria-hidden=\"true\" tabindex=\"0\">\n      <div class=\"ac-container ac-adaptiveCard\" style=\"\"><div class=\"ac-textBlock\" style=\"\"><p>Here is the TypeScript code with JSDoc annotations:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">/**\n * The status of a button.\n * <span class=\"hljs-doctag\">@typedef</span> {<span class=\"hljs-type\">'BLANK' | 'TRIGGERED' | 'UNKNOWN'</span>} <span class=\"hljs-variable\">ButtonStatus</span>\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Gets the status of a button.\n * <span class=\"hljs-doctag\">@async</span>\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">getStatusOfButton</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">ElementHandle&lt;HTMLButtonElement&gt;</span>} <span class=\"hljs-variable\">elementHandle</span> - The handle to the button element.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">boolean</span>} <span class=\"hljs-variable\">isLogged</span> - Whether the user is logged in or not.\n * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Promise&lt;ButtonStatus&gt;</span>} The status of the button.\n */</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStatusOfButton</span>(<span class=\"hljs-params\">\n  elementHandle: ElementHandle&lt;HTMLButtonElement&gt;,\n  isLogged: <span class=\"hljs-built_in\">boolean</span>,\n</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">ButtonStatus</span>&gt; {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">forPlay</span>();\n  <span class=\"hljs-keyword\">const</span> color = <span class=\"hljs-keyword\">await</span> elementHandle.evaluate(<span class=\"hljs-function\">(<span class=\"hljs-params\">element</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">getComputedStyle</span>(element).<span class=\"hljs-property\">backgroundColor</span>;\n  });\n  <span class=\"hljs-keyword\">if</span> (color === <span class=\"hljs-string\">'rgb(79, 84, 92)'</span> || color === <span class=\"hljs-string\">'rgb(104, 109, 115)'</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'BLANK'</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n    color === <span class=\"hljs-string\">'rgb(88, 101, 242)'</span> ||\n    color === <span class=\"hljs-string\">'rgb(71, 82, 196)'</span> ||\n    color === <span class=\"hljs-string\">'rgb(45, 125, 70)'</span> ||\n    color === <span class=\"hljs-string\">'@@@ rgb(45, 125, 70)'</span>\n  ) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'TRIGGERED'</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">if</span> (isLogged) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">'Unknown color'</span>, { color });\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'UNKNOWN'</span>;\n  }\n}\n</code></pre>\n</div></div>\n    </div>\n  ",
        "metadataText": "@see ChatBing from Sun Mar 26 2023"
    }
]
